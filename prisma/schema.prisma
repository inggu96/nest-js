generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Book {
  id        Int       @id @default(autoincrement())
  author    String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Phone {
  id     Int    @id @default(autoincrement())
  number String
  type   String
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  birth    String?
  email    String? @unique
  nickname String?
  password String?
}

model Movie {
  id               Int            @id @default(autoincrement())
  adult            Boolean?
  backdropPath     String?        @map("backdrop_path")
  originalLanguage String         @map("original_language")
  originalTitle    String         @map("original_title")
  overview         String?        @db.LongText
  popularity       Float?
  posterPath       String?        @map("poster_path")
  releaseDate      DateTime       @map("release_date")
  title            String
  video            Boolean?
  voteAverage      Float?          @map("vote_average")
  voteCount        Int?            @map("vote_count")
  tmdbId           Int            @unique
  genres              Genre[]             @relation("MovieGenres")
  actors              Actor[]             @relation("MovieActors")
  staffs              Staff[]             @relation("MovieStaffs")
  productionCompanies ProductionCompany[] @relation("MovieProductionCompanies")
  movieGenres          MovieGenres[]
  movieActors         MovieActors[]
  movieStaffs         MovieStaffs[]
  movieProductionCompanies MovieProductionCompanies[]

  @@map("movies")
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String
  movies Movie[] @relation("MovieGenres")
  movieGenres MovieGenres[]
}

model ProductionCompany {
  id            Int    @id @default(autoincrement())
  name          String
  logoPath      String? @map("logo_path")
  originCountry String  @map("origin_country")
  movies        Movie[] @relation("MovieProductionCompanies")
  movieProductionCompanies MovieProductionCompanies[]
}

model Actor {
  id       Int       @id @default(autoincrement())
  name     String
  movies   Movie[]   @relation("MovieActors")
  movieActors MovieActors[]
}

model Staff {
  id       Int       @id @default(autoincrement())
  name     String
  role     String
  movies   Movie[]   @relation("MovieStaffs")
  movieStaffs MovieStaffs[]
}

model MovieGenres {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([movieId, genreId])
}

model MovieProductionCompanies {
  movie               Movie @relation(fields: [movieId], references: [id])
  movieId             Int
  productionCompany   ProductionCompany @relation(fields: [productionCompanyId], references: [id])
  productionCompanyId Int

  @@id([movieId, productionCompanyId])
}
model MovieActors {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  actor   Actor @relation(fields: [actorId], references: [id])
  actorId Int

  @@id([movieId, actorId])
}

model MovieStaffs {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  staff   Staff @relation(fields: [staffId], references: [id])
  staffId Int
  role    String

  @@id([movieId, staffId, role])
}